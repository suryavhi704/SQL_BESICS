-- SQL(STRUCTURED QUERY LANGUAGE):-
--------------------------------------

-- WHAT IS DATABASE:-
-->DATABASE IS A COLLECTION OF DATA ELEMENTS.WHERE DATAS ARE STORED IN SUCH A WAY THAT IT CAN BE ACCESSED EASILY.

--WHAT ARE THE DIFFERENT TYPES OF DATABASES?
-->1.RELATIOINAL DATABASE.(DATA IS STORED IN FORM OF TABLES.(SQL))
-->2.NON-RELATIONAL DATABASE.(MONGO DB)

--WHAT IS SQL?
-->SQL IS A PROGRSMMING LANGUAGE WHICH IS USED TO COMMUNICATE WITH DATABASE.

--DIFFERENT TYPES OF SQL COMMANDS:-
-->DDL(DATA DEFINATION LANGUAGE):-CREATE,ALTER,DROP,TRUNCATE.
-->DQL(DATA QUERY LANGUAGE):-SELECT.
-->DML(DATA MANIPULATION LANGUAGE):-SELECT,INSERT,DELETE,UPDATE.
-->TQL(TRANSACTION QUERY LANGUAGE):-START TRANSACTION,ROLLBACK,COMMIT.

--IMP NOTE-->SQL IS NOT A CASE SENSITIVE LANGUAGE.


-- CREATING OUR 1ST DATABASE:-
CREATE DATABASE COLLEGE;
USE COLLEGE;

-- DELETING DATABASE:-
DROP DATABASE COLLEGE;

--CREATING TABLE:-
CREATE TABLE STUDENT(
  ID INT PRIMARY KEY,--UNIQUE VARIABLE OR KEY AND SHOULD BE NOTNULL.
  NAME VARCHAR(50),
  DEPT VARCHAR(50),
  LOCATION VARCHAR(50)
  );

-- PRIMARY KEY:-IT'S THE COLUMN OR ATTRIBUTE WHICH DEFINES EACH ROW UNIQUELY.
-- FOREIGN KEY:-IT'S THE COLUMN OR ATTRIBUTE WHICH IS A PRIMARY KEY OF ONE TABLE AND USED AS FOREIGN KEY INTO ANOTHER KEY
-->THE CONCEPT OF FOREIGN KEY CAN BE USED TO NORMALIZE THE TABLE(REDUCING REDUNDENCY)

--INITIALIZING TABLE:-
INSERT INTO STUDENT
(ID,NAME,DEPT,LOCATION)
VALUES
(1,'SHRADHA','AIML','UP'),
(2,'SAMRAT','AIML','NBP'),
(3,'DONA','CSE','MDM'),
(4,'AISHWARYA','AIML','HABRA'),
(5,'SURYAVHI','CSE','NBP');

--SHOWING THE TABLE:-
SELECT * FROM STUDENT;

--DROPING THE TABLE:-
DROP TABLE STUDENT;

--SHOWING ALL THE TABLES:-
SHOW DATABASES;

--SHOWING THE DATABASE:-
SHOW TABLES;

--SHOWING THE IMPLEMENT OF FORIGN KEY:-
CREATE TABLE CLG_DEPARTMENT
(
ID INT PRIMARY KEY,
DEPT_NAME VARCHAR(50)
);

CREATE TABLE TEACHER
(
NAME VARCHAR(50),
FOREIGN KEY (DEPT_ID) REFERENCES CLG_DEPARTMENT(ID)
);

--DIFFERENT OPEARTIONS USING DQL:-
SELECT * FROM STUDENT;
 -->SELECTING INLY NAME AND DEPARTMENT:-
SELECT NAME,DEPT FROM STUDENT;
 -->SELECTING ROWS USING WHERE CLAUSE:-
SELECT * FROM STUDENT
WHERE DEPT='AIML';
 -->SELECTING ROWS USING LIMIT COLUMNS:-
 SELECT * FROM STUDENT
 WHERE LOCATION='NBP'
 LIMIT 1;

--ADDING NEW COLUMNS:-
ALTER TABLE STUDENT
ADD COLUMN ROLL_NUMBER INT;

--DELETING COLUMN :-
ALTER TABLE STUDENT
DELETE COLUMN ROLL_NUMBER;

--IF WE WANT TO UPDATE DATA:-
UPDATE STUDENT
SET DEPT='ECE'
WHERE NAME='SAMRAT';

--IF WE WANT TO DELETE ROW:-
DELETE FROM STUDENT 
WHERE NAME='AISHWARYA';

--NEW TABLE CREATION:-

create table customer(
customerid tinyint primary key,
firstname varchar(50),
lastname varchar(50),
email varchar(60),
address varchar(100),
city varchar(20),
state varchar(30),
zip char(6)
);
-- INSERTING ELEMENTS:-
insert into customer
(customerid,firstname,lastname,email,address,city,state,zip)
values
(1,'Abhishek','Singh','as@gmail.com','MGRoad','Mumbai','Maharastra','430003'),
(2,'Ishika','K','ik@outlook.com','VVPuram','Bang','Karnataka','456781'),
(3,'Chirag','Dhamija','cd@gmail.com','LKPuram','HYD','TS','56001'),
(4,'Vivek','Gupta','vk@gmail.com','Raj Nagar','Delhi','Delhi','234561'),
(5,'Ganesh','Ram','gr@gmail.com','Lalnagar','Sanjose','USA','987654');

SELECT * FROM CUSTOMER;

--ORDER BY CLAUSE:-
SELECT * FROM CUSTOMER 
ORDER BY firstname;

--GROUP BY CLAUSE AND AGGREGATION FUNCTION:-
--(GENERALLY APPLICABLE FOR CASE STUDY,NOT FOR SMALL SATASET)
SELECT firstname,SUM(ZIP)
FROM customer
GROUP BY firstname
HAVING zip>50000-- CONDITION
ORDER BY zip;

--GENERAL ORDER OF USING DIFFERENT QUERIES:-
--SELECT DB_NAME
--FROM TABLE_NAME
--WHERE CONDITION
--GROUP BY COLUMN_NAME
--HAVING CONDITION
--ORDER BY COLUMN_NAME

--UPDATE QUERY:
UPDATE customer
SET zip=zip+1;

--ALTER QUERY:-
ALTER TABLE CUSTOMER
ADD COLUMN PHN_NUMBER INT UNIQUE;

ALTER TABLE CUTOMER
DROP COLUMN PHN_NUMBER;

--DIFFERENT TYPES OF JOINS:-
-->1.INNER JOIN.(COMMON ELEMENTS)
-->2.OUTER JOIN.
    -->LEFT JOIN.
	-->RIGHT JOIN.
	-->FULL JOIN.(LEFT JOIN U RIGHT JOIN)

-- Creating Employees table
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    Name VARCHAR(50),
    DepartmentID INT
);

-- Inserting data into Employees table
INSERT INTO Employees (EmployeeID, Name, DepartmentID)
VALUES
(1, 'Alice', 101),
(2, 'Bob', 102),
(3, 'Charlie', NULL),
(4, 'Diana', 101);

-- Creating Departments table
CREATE TABLE Departments (
    DepartmentID INT PRIMARY KEY,
    DepartmentName VARCHAR(50)
);

-- Inserting data into Departments table
INSERT INTO Departments (DepartmentID, DepartmentName)
VALUES
(101, 'HR'),
(102, 'IT'),
(103, 'Finance');

SELECT * FROM Employees;
SELECT * FROM Departments;

--USAGE OF ALTER QUERY:-

UPDATE Employees
SET DepartmentID=103
WHERE DepartmentID=NULL;

--INNER JOIN:-
SELECT * FROM Employees AS E
INNER JOIN
Departments AS D
ON
E.DepartmentID=D.DepartmentID;

--LEFT JOIN:-
SELECT * FROM Employees AS E
LEFT JOIN 
Departments AS D
ON 
E.DepartmentID=D.DepartmentID;

--RIGHT JOIN:-
SELECT * FROM Employees AS E
RIGHT JOIN 
Departments AS D
ON 
E.DepartmentID=D.DepartmentID;

--FULL JOIN:-
-->METHOD 1:-
	--LEFT JOIN:-
	SELECT * FROM Employees AS E
	LEFT JOIN 
	Departments AS D
	ON 
	E.DepartmentID=D.DepartmentID;
	UNION
	--RIGHT JOIN:-
	SELECT * FROM Employees AS E
	RIGHT JOIN 
	Departments AS D
	ON 
	E.DepartmentID=D.DepartmentID;
-->METHOD 2:
	--FULL JOIN:-
	SELECT * FROM Employees AS E
	FULL JOIN
	Departments AS D
	ON 
	E.DepartmentID=D.DepartmentID;

--CTE(COMMON TABLE EXPRESSION):-
-->CREATE A CTE WHICH PERFORM PRINTING EMPLOYEE TABLE:-
WITH INNER_JOIN 
AS 
(

SELECT * FROM Employees AS E

)
SELECT * FROM INNER_JOIN;

-->CREATE A CTE WHICH PERFORM DQL:-
WITH DQL
AS 
(

SELECT * FROM Employees 
WHERE DepartmentID=101

)
SELECT * FROM DQL;


--ANALYTICAL FUNCTIONS/RANK FUNCTIONS/WINDOW FUNCTIONS:-
-->ROW NUMBER:-COUNTS THE NUMBER OF ROWS.
-->DENSE RANK:-PERFORMS RANKING WITHOUT GAP.
-->RANK:-PERFORMS RANKING WITH GAP.
-- Creating Students table
CREATE TABLE Students (
    ID INT PRIMARY KEY,
    Name VARCHAR(50),
    School VARCHAR(50),
    Marks INT
);

-- Inserting data into Students table
INSERT INTO Students (ID, Name, School, Marks)
VALUES
(1, 'Arjun', 'Green Valley High', 85),
(2, 'Priya', 'Springfield Academy', 90),
(3, 'Ravi', 'Green Valley High', 78),
(4, 'Meera', 'Hillside International', 88),
(5, 'Ankit', 'Hillside International', 76),
(6, 'Sneha', 'Springfield Academy', 92),
(7, 'Raj', 'Green Valley High', 80),
(8, 'Naina', 'Springfield Academy', 89),
(9, 'Karan', 'Hillside International', 84),
(10, 'Pooja', 'Green Valley High', 75);

SELECT * FROM Students;

--ANALYTICAL FUNCTIONS:-
SELECT * ,
RANK() OVER (ORDER BY MARKS ASC) AS RANK_,
ROW_NUMBER() OVER (ORDER BY MARKS ASC) AS R_N,
DENSE_RANK() OVER (ORDER BY MARKS ASC) AS D_R
FROM Students
ORDER BY ID;


